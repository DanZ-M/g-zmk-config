/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
 

//#include <dt-bindings/zmk/backlight.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>


#define DEFAULT 0
#define NUMB    1
#define RAISE   2
#define MOC     3
#define NONE    0
#define SKL 	  &tol 0 ESC	      	 // tap: Escape        | long-tap: Toggle layer 0 (DEFAULT)		

#define NAV_BSPC  &mt LC(BSPC) BSPC       // tap: bspc        | long-tap: delete word backward
#define NAV_DEL   &mt LC(DEL)  DEL        // tap: del         | long-tap: delete word forward
#define XXX 	  &none
#define ___  	  &trans  
#define PRV_WD    &mt HOME      LC(LEFT)     // tap: left           | long-tap: beginning of line
#define NXT_WD    &mt END       LC(RIGHT)    // tap: right          | long-tap: end       of line
#define BG_DOC    &mt LC(HOME)  UP           // tap: up             | long-tap: beginning of document
#define ED_DOC    &mt LC(END)   DOWN         // tap: down           | long-tap: end       of document
#define ALTENT    &mi RC(P)     LA(RET)      // tap: ALT-ENTER      | long-tap: PRINT
#define z_in      &mt RC(N0)    RC(PLUS)     // tap: zoom in        | long-tap: zoom reset
#define z_rst     &kp RC(N0)                 // tap: zoom reset
#define z_out     &mt RC(N0)    RC(MINUS)    // tap: zoom out       | long-tap: zoom reset
#define s_cap     &hm PSCRN     LG(LS(S))    // tap: SNIPPING tool  | long-tap: printscreen
#define CLPAS     &hm LG(V)     RC(V)        // tap: Paste          | long-tap: Open Clipboard
#define TASKM     &kp LC(LA(DEL)) // C-A-DEL

//#define SPELL     &kp LC(LG(D))
//#define TRADUCT   &kp LS(LA(T))
//#define EMOJI     &kp LC(LG(SPACE))

#define BRIGD	    &rgb_ug RGB_BRD
#define on_off      &rgb_ug RGB_TOG
#define EFFET       &rgb_ug RGB_EFF
#define BRIGU       &rgb_ug RGB_BRI
#define E_POW       &ext_power EP_TOG
#define CANCEL      &kp K_CANCEL
//////////// Enable OLED ////////////

//////////// Release times//// NUM-WORD////////
&sl {
    release-after-ms = <2000>;
};
&sk {
    release-after-ms = <2600>;
    quick-release;
};
//&num_word {  // num-word, requires PR #1441
//    layers = <NUMB>;
  
//};
//&caps_word {
   
//    continue-list = <UNDERSCORE MINUS DEL BACKSPACE DELETE>;
   
//};
/////////////// MACROS ///////////////
#define MACRO(name, keys)                  \
name: name##_macro {                       \
	label = #name;                     \
	compatible = "zmk,behavior-macro"; \
	#binding-cells = <0>;              \
	tap-ms = <4>;                      \
	wait-ms = <4>;                     \
	bindings = <keys>;                 \
};
/ {
	macros {
		MACRO(pass,  &macro_press &kp LSHFT &macro_tap &kp M &macro_release &kp LSHFT &macro_tap_time 500 &kp RET)
		MACRO(DQT_q, &kp DQT &kp DQT &kp LEFT)
		MACRO(PAR_s, &macro_tap &kp LPAR &kp RPAR &kp LEFT)
		MACRO(SNC_up, &macro_press &kp LSHFT &macro_tap &kp S &kp N &kp C &macro_release &kp LSHFT &macro_tap &kp HASH)
		MACRO(DIAM,  &macro_press &kp LALT  &macro_tap   &kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N6 &macro_release  &kp LALT)
		MACRO(ENNE,  &macro_tap &kp LS(M) &kp Z &kp SPACE &kp HASH &kp SPACE &kp N1 &kp N3 &kp SPACE &kp N2 &kp N4 &kp SPACE &kp DOLLAR &macro_tap_time 500 &kp RET)
		MACRO(ps,    &macro_tap &kp LS(P) &kp LS(S) &kp MINUS &kp MINUS &kp HASH &kp P &kp LEFT &kp LEFT)
		MACRO(INIT,  &kp SPACE &sk RSHFT)
		MACRO(INIT2, &kp BSPC &sk RSHFT)
	};
};
//////////// COMBOS /////////////////
#define COMBO(name, keypress, keypos, Term)      \
combo_##name {                                   \
	timeout-ms = <Term>;                     \
	bindings = <keypress>;                   \
	key-positions = <keypos>;                \
    slow-release;                            \
};
       
/ {
	combos {
		compatible = "zmk,combos";
		COMBO(LREBOOT,		&bootloader,	0	4,	45)
		COMBO(AT,			&kp AT,			1	16,	45)
		COMBO(LBKSP,		NAV_BSPC,		4	5,	95)
		COMBO(LRESET,		&kp AMPS,		5	0,	45)
		COMBO(RDELET,		NAV_DEL,		5	17,	95)					// Combo key positions
		COMBO(RRESET,		&kp AMPS,		6	11,	45)		//  0  1  2  3  4  5      6  7  8  9  10 11
		COMBO(DEL,			&bspc_del,		30	40,	25)		// 12 13 14 15 16 17      18 19 20 21 22 23
		COMBO(RBKSP,		&kp LC(BSPC),	6	7,	95)		// 24 25 26 27 28 29      30 31 32 33 34 35
		COMBO(RTAB,			&kp LS(TAB),	7	8,	20)		//	  		 36 37 38    39 40 41           
		COMBO(RREBOOT,		&bootloader,	7	11,	45)
		COMBO(RESC,			SKL,		7	8	9,	55)
		COMBO(TAB,			&kp TAB,		8	9,	20)
		COMBO(ENDEL,		&kp DEL,		11	23,	05)
		COMBO(AMPS,			&kp AMPS,		13	16,	45)
		COMBO(DLLR,			&kp DLLR,		14	16,	45)
		COMBO(MINUS,		&kp MINUS,		19	39,	45)
		COMBO(RCOPY,		&kp LC(C),		19	40,	45)
		COMBO(RPASTE,		&kp LC(V),		19	41,	45)
		COMBO(LCUT,			&kp LC(X),		24	26,	50)
		COMBO(LCOPY,		&kp LC(C),		26	27,	30)
		COMBO(LPASTE,		CLPAS,   		28	29,	50)
		COMBO(Under,		&kp UNDER,		31	39,	45)
		COMBO(numb,			&tog NUMB,		40	41,	45)
		                // invoke macros
		COMBO(DIAM,			&DIAM,			15	16,	95)
		COMBO(pass,			&pass,			25	32,	85)
		COMBO(DQTx2,		&DQT_q,			29	30,	45)
		COMBO(PARx2,		&PAR_s,			17	18,	45)
		COMBO(SNC,			&SNC_up,		5	6,	45)
		COMBO(ps,			&ps,			10	14,	85)
	};
};  
//////////////////////////////
&mt {	flavor = "tap-preferred";	tapping-term-ms = <320>;	quick-tap-ms = <450>;	hold-trigger-key-positions = <0>;             // repeat on tap-into-hold
      																		// tap on interrupt
};
/ {
   behaviors {

 //  num_word: behavior_num_word {    compatible = "zmk,behavior-caps-word";      label = "NUM_WORD";     #binding-cells = <0>;         layers = <NUMB>;                           			    	// insert location of numbers layer here
  //       continue-list = <KP_NLCK FSLH STAR LALT BACKSPACE DELETE DOT KP_N0 KP_N1 KP_N2 KP_N3 KP_N4 KP_N5 KP_N6 KP_N7 KP_N8 KP_N9 KP_DOT KP_EQUAL KP_DIVIDE KP_MULTIPLY MINUS PLUS KP_MINUS KP_ENTER>; 		// adjust as desired
  //          ignore-numbers;                                     // numbers don't deactivate the layer
//	};
   hm: homerow_modsx {	 	compatible = "zmk,behavior-hold-tap";	 label = "HOMEROW_MODSx";	#binding-cells = <2>;		flavor = "tap-preferred";
        tapping_term_ms = <360>; 	 quick-tap-ms = <100>; 		 bindings = <&kp>, <&kp>;	
        };
   mi: homerow_mods2 {	 	compatible = "zmk,behavior-hold-tap";	 label = "HOMEROW_MODS2"; 	#binding-cells = <2>;		flavor = "tap-preferred";
	   tapping_term_ms = <280>; 	 quick-tap-ms = <220>;		 bindings = <&kp>, <&kp>;
	};
   ni: homerow_mods3 {	 	compatible = "zmk,behavior-hold-tap";	 label = "HOMEROW_MODS3"; 	#binding-cells = <2>;		flavor = "tap-preferred";
	   tapping_term_ms = <100>; 	 quick-tap-ms = <320>;		 bindings = <&kp>, <&INIT2>;		   
        };
   phs: homerow_mods4 {     compatible = "zmk,behavior-hold-tap";	 label = "HOMEROW_MODS4";	#binding-cells = <2>;		flavor = "hold-preferred";
        tapping-term-ms = <250>;	 quick-tap-ms = <280>;		 	bindings = <&kp>, <&td_st>;	retro-tap;
        };
   phs2: homerow_mods5 {     compatible = "zmk,behavior-hold-tap";	 label = "HOMEROW_MODS5";	#binding-cells = <2>;		flavor = "hold-preferred";
        tapping-term-ms = <160>;	 quick-tap-ms = <5>;		 	bindings = <&kp>, <&sk>;	retro-tap;
        };
   phc: homerow_mods6 {		compatible = "zmk,behavior-hold-tap";    label = "HOMEROW_MODS6";	#binding-cells = <2>;		flavor = "hold-preferred";
        tapping-term-ms = <155>;	 quick-tap-ms = <5>;		 bindings = <&kp>, <&sk>;	
        };
   phh: homerow_mods7 {		compatible = "zmk,behavior-hold-tap";    label = "HOMEROW_MODS7";	#binding-cells = <2>;		flavor = "tap-preferred";
            tapping-term-ms = <320>;	 quick-tap-ms = <280>;		 bindings = <&kp>, <&td2>;	
        };
   tol: homerow_mods8 {	 	compatible = "zmk,behavior-hold-tap";	 label = "HOMEROW_MODS8"; 	#binding-cells = <2>;		flavor = "tap-preferred";
	   tapping_term_ms = <280>; 	 quick-tap-ms = <220>;		 bindings = <&tog>, <&kp>;
	};

   bspc_del: back_del {	compatible = "zmk,behavior-mod-morph";	 label = "BACK_DEL";		 #binding-cells = <0>;
         bindings =	 <NAV_BSPC>, <NAV_DEL>;		mods = <(MOD_LSFT|MOD_RSFT)>;		keep-mods = <(MOD_LSFT)>;
        };
   close: close {		compatible = "zmk,behavior-mod-morph";	 label = "CLOSE";		 #binding-cells = <0>;
            bindings = 	<&hm N2 E>, <&kp LA(F4)>; 	mods = <(MOD_LALT|MOD_RALT)>;	

	    //MOD_LSFT MOD_RSFT MOD_LCTL MOD_RCTL MOD_LALT MOD_RALT MOD_LGUI MOD_RGUI

        };
   td0: tap_dance_0 {		compatible = "zmk,behavior-tap-dance"; 	label = "TAP_DANCE_0";			#binding-cells = <0>;        
            tapping-term-ms = <550>;   
        bindings = <&kp FSLH>, <&kp BACKSLASH>, <&kp PRCNT>, <&kp PIPE>, <&kp HASH>;
        };
   td1: tap_dance_1 {		compatible = "zmk,behavior-tap-dance"; 	label = "TAP_DANCE_1";			#binding-cells = <0>;
            tapping-term-ms = <260>;
        bindings = <&hm QUESTION G>, <&kp LPAR>;
        };
   td2: tap_dance_2 {		compatible = "zmk,behavior-tap-dance"; 	label = "TAP_DANCE_2";			#binding-cells = <0>;
            tapping-term-ms = <300>;
        bindings = <&kp H>, <&kp RPAR>;
        };
   td3: tap_dance_3 {		compatible = "zmk,behavior-tap-dance"; 	label = "TAP_DANCE_3";			#binding-cells = <0>;
            tapping-term-ms = <300>;
        bindings = <&kp H>, <&kp R>;
        };
   td_jt: tap_dance_mod_tap2 {	compatible = "zmk,behavior-tap-dance";  label = "TAP_DANCE_MOD_TAP2";		#binding-cells = <0>;
	    tapping-term-ms = <230>;		
        bindings = <&pht RCTRL J>, <&sk LCTRL>;
        };
   td_st: tap_dance_mod_tap3 {	compatible = "zmk,behavior-tap-dance";	label = "TAP_DANCE_MOD_TAP3";		#binding-cells = <0>;
	    tapping-term-ms = <300>;
        bindings = <&sk RSHIFT>, <&kp SQT>;		
        };
   td4: tap_dance_mod_tap4 {	compatible = "zmk,behavior-tap-dance";	label = "TAP_DANCE_MOD_TAP4";		#binding-cells = <0>;
            tapping-term-ms = <270>;
        bindings = <&hm N7 X>, <&kp LC(X)>;
        };
   td5: tap_dance_mod_tap5 {	compatible = "zmk,behavior-tap-dance";	label = "TAP_DANCE_MOD_TAP5";		#binding-cells = <0>;
            tapping-term-ms = <200>;
        bindings = <&phe LALT SPACE>, <&kp LA(RET)>;
        };
   td6: tap_dance_mod_tap6 {	compatible = "zmk,behavior-tap-dance";	label = "TAP_DANCE_MOD_TAP6";		#binding-cells = <0>;
            tapping-term-ms = <250>;
        bindings = <&kp RET>, <ALTENT>;
        };
   td7: tap_dance_mod_tap7 {	compatible = "zmk,behavior-tap-dance";	label = "TAP_DANCE_MOD_TAP7";		#binding-cells = <0>;
            tapping-term-ms = <390>;
        bindings = <&INIT>, <&ni BSPC 0>;
        };
   pht: pos_h_t2 {		compatible = "zmk,behavior-hold-tap";	label = "POS_H_T2";			#binding-cells = <2>;	flavor = "tap-preferred";
            tapping-term-ms = <155>;	quick-tap-ms = <10>;	bindings = <&sk>, <&kp>;	retro-tap;
        hold-trigger-key-positions = <1 2 3 4 5 6 7 8 9 10 13 14 15 16 17 18 19 20 21 22 23 25 26 27 28 29 30 31 32 33 34>;
        };
   phe: pos_h_t4 {	 compatible = "zmk,behavior-hold-tap";		label = "POS_H_T4";	 #binding-cells = <2>;	 flavor = "hold-preferred";
          tapping-term-ms = <180>;	 quick-tap-ms = <20>;	    bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <7 8 9 19 20 21 31 32 33 34>;
        };
   phl: pos_h_t5 {	 compatible = "zmk,behavior-hold-tap";		label = "POS_H_T5";	 #binding-cells = <2>;	 flavor = "tap-preferred";
          tapping-term-ms = <350>;	 quick-tap-ms = <300>;	    bindings = <&mo>, <&td7>;  	

            hold-trigger-key-positions = <19 20 21 22 31 32 33 34>;
        };
   ph2: pos_h_t6{	 compatible = "zmk,behavior-hold-tap";		label = "POS_H_T6";	 #binding-cells = <2>;	 flavor = "hold-preferred";
          tapping-term-ms = <250>;	 quick-tap-ms = <300>;	    bindings = <&mo>, <&td3>;	

            hold-trigger-key-positions = <1 2 3 4 5 6 7 8 9 10 13 14 15 16 17 18 19 20 21 22 23 25 26 27 28 29 30 31 32 33 34>;
        };
     };
};
/* definitions for mouse layer */
//#include "mouse.dtsi"
//////////////////////////////
/ {
    keymap {
                compatible = "zmk,keymap";
                default_layer {
                        bindings = <
// _______________________________________________________________________________          _______________________________________________________________________________ 
// |       ESC     |     Q     |      W     |      E     |      R    |      T     |         |     Y      |     U     |     I     |      O     |     P     |     BKSP     ||
        &kp ESC        &kp Q      &hm N1 W      &close     &hm N3 R      &kp T                  &kp Y        &kp U    &hm LS(I) I     &kp O       &kp P       &bspc_del
// ___position 0___|______1____|______2_____|______3_____|_____4_____|______5_____|         |______6_____|_____7_____|_____8_____|______9_____|_____10____|______11______|| 
// |      TAB      |     A     |      S     |      D     |     F     |      G     |         |     H      |      J    |     K     |      L     |     ;     |   RSHIFT / ' ||
        &kp TAB        &kp A      &hm N4 S     &hm N5 D     &hm N6 F      &td1                &phh SQT 0     &td_jt      &kp K        &kp L      &kp SEMI   &phs RSHIFT 0
// |_______12______|_____13____|_____14_____|_____15_____|_____16____|_____17_____|         |_____18_____|_____19____|_____20____|_____21_____|_____22____|______23______||   
// |      CTRL     |     Z     |     X      |     C      |      V    |     B      |         |  Layer3/N  |     M     |      ,    |     .      |   /\%#    |     ENTER    || 
  &phc LCTRL LCTRL     &kp Z        &td4       &hm N8 C     &hm N9 V    &hm N0 B               &lt 3 N       &kp M     &kp COMMA     &kp DOT      &td0          &td6
// _______24_______|_____25____|_____26_____|_____27_____|_____28____|_____29_____|         |_____30_____|____31_____|____32_____|_____33_____|_____34____|______35______||                   
//                                      |  CAPS/SHFT   |    ALT    |    ENTER    |           |   SPC/ALT    |   LAYER2   |   LAYER1    |
                                        &mt LSHIFT CAPS &phs2 LALT LSHIFT  &kp RET                    &td5       &phl RAISE 0  &ph2 NUMB 0 
//                                      |______36______|_____37____|______38_____|           |_______39_____|_____40_____|______41_____|                    
                        >;
                };
                numb_layer {
                        bindings = <                
// _______________________________________________________________________________         _______________________________________________________________________________
// |    ESC    |            |             |    RGB    |           |      =       |         |     /      |      7      |     8      |     9     |     -     |     BKSP   ||                       
      &kp ESC       ___          ___        ___    ___    &kp EQUAL               &kp FSLH     &kp KP_N7    &kp KP_N8    &kp KP_N9   &kp MINUS       ___   
// ____________|____________|_____________|___________|___________|______________|         |____________|_____________|____________|___________|___________|____________|| 
// |    TAB    |            |             |    RGB    |           |   Insert     |         |    *       |      4      |     5      |     6     |     +     |  SHIFT /'  || 
       ___         &ENNE         ___        ___    ___    &kp  INS                &kp STAR     &kp KP_N4    &kp KP_N5    &kp KP_N6   &kp PLUS  &pht RSHIFT SQT
// |___________|____________|_____________|___________|___________|______________|         |____________|_____________|____________|___________|___________|____________|| 
// |    CTRL   |            |             |    RGB    |           |   NUM LOCK   |         |     ./,    |       1     |      2     |      3    |     0     |    ENTER   ||   
       ___         &pass          ___         ___    ___  &kp KP_NLCK            &hm COMMA DOT  &kp KP_N1    &kp KP_N2    &kp KP_N3   &kp KP_N0    &kp RET   
// |___________|____________|_____________|___________|___________|______________|         |____________|_____________|____________|___________|___________|____________||            
//                                       |     LGUI   |    ALT    |   ENTER    |            |   SPC/ALT   |   LAYER2   |             |   
											&sk LGUI       ___           ___                &phe LALT SPACE    ___           ___
//                                       |____________|___________|____________|            |_____________|____________|_____________|                                                     
                        >;
                };
                raise_layer {
                        bindings = <                        
// _________________________________________________________________________________         _________________________________________________________________________ 
// |      F1    |      F2      |      F3     |    F      |     F5     |     F6     |         |    F7    |     F8    |     F9   |    F10    |    F11    |     F12      ||                        
     &mt ESC F1      &kp F2        &kp F3        &kp F4      &kp F5      &kp F6                 &kp F7     &kp F8      &kp F9     &kp F10     &kp F11      &kp F12   
// _____________|______________|_____________|___________|____________|____________|         |__________|___________|__________|___________|___________|______________|| 
// |     TAB    |   CLICK 3    |      <      | Mouse Up  |      >     |  Wheel Up  |         |          |   LEFT    |    UP    |   RIGHT   |    RCTRL  | PRINTSCREEN  ||   
         ___         ___         ___       ___      ___       ___                 z_out     &kp LEFT    BG_DOC    &kp RIGHT   &kp RCTRL      s_cap
// |____________|______________|_____________|___________|____________|____________|         |__________|___________|__________|___________|___________|______________||   
// |     CTRL   |  Right CLICK |  Mouse Left | Mouse Dn  |Mouse Right |  Wheel Dow |         |          | PREV WORD |    DOWN  | Next Word |   RSHIFT  |     ENTER    ||    
         ___         ___        ___       ___       ___       ___                 z_in      PRV_WD      ED_DOC     NXT_WD     &kp RSHIFT     &kp RET  
// _____________|______________|_____________|___________|____________|____________|         |__________|___________|__________|___________|___________|______________||                   
//                                      |  CAPS/SHFT   | Left CLICK |   ENTER     |            |   SPC/ALT   |   LAYER2   |   LAYER1    |   
                    	                    &sk LGUI       ___        ___                         ___           ___       &kp RALT
//                                      |______________|____________|_____________|            |_____________|____________|_____________|                                                 
                        >;
                };
		moc_layer {
                        bindings = <
// _______________________________________________________________________________         _______________________________________________________________________________ 
// |     ESC     |      Q     |     W     |      E     |      R     |      T     |         |     ^      |     &      |     *      |     (      |      )     |     BKSP     ||                        
      &kp ESC     &bt BT_SEL 0 &bt BT_SEL 1 &ext_power EP_TOG &out OUT_TOG &kp EQUAL          &kp CARET    &kp AMPS  &kp KP_MULTIPLY &kp LPAR     &kp RPAR         ___   
// ______________|____________|___________|____________|____________|____________|         |____________|____________|____________|____________|____________|______________|| 
// |     TAB     |      A     |      S    |      D     |      F     |      G     |         |     H      |      J     |     up     |            |     \      |   RSHIFT / ' ||   
      ___         &bt BT_SEL 2 &bt BT_SEL 3 &out OUT_USB     ___         TASKM               &kp MINUS        ___         &kp UP      NXT_WD      &kp BSLH     &kp RSHIFT
// |_____________|____________|___________|____________|____________|____________|         |____________|____________|____________|____________|____________|______________||   
// |     CTRL    |      Z     |     X     |     C      |      V     |      B     |         |  Layer1/N  |    Menu    |   down    |     .      |      /     |     ENTER    ||    
       ___        &bt BT_SEL 4    &kp X     &out OUT_BLE  &bt BT_CLR  &kp KP_NLCK              ___         &kp K_APP     &kp DOWN    &kp RIGHT        ___       &kp RET   
// ______________|____________|___________|____________|____________|____________|         |____________|____________|____________|____________|____________|______________||                   
//                                      |     LGUI     |    ALT    |   ENTER    |            |   SPC/ALT   |   LAYER2   |   LAYER1    |   
                    	                    &sk LGUI        ___         ___                      &kp RET       ___        &kp RALT
//                                      |______________|___________|____________|            |_____________|____________|_____________|                                                 
                        >;
                };
         }; 
           
};            
